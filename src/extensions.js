import { getHexAlpha } from './utils.js';

const errorLens = (palette) => {
  return {
    'errorLens.errorBackground': `${palette.primary.red}${getHexAlpha(20)}`,
    'errorLens.errorBackgroundLight': `${palette.primary.red}${getHexAlpha(20)}`,
    'errorLens.errorForeground': palette.primary.red,
    'errorLens.errorForegroundLight': palette.primary.red,
    'errorLens.errorMessageBackground': `${palette.primary.red}${getHexAlpha(20)}`,
    'errorLens.errorRangeBackground': `${palette.primary.red}${getHexAlpha(20)}`,
    'errorLens.hintBackground': `${palette.primary.mint}${getHexAlpha(20)}`,
    'errorLens.hintBackgroundLight': `${palette.primary.mint}${getHexAlpha(20)}`,
    'errorLens.hintForeground': palette.primary.mint,
    'errorLens.hintForegroundLight': palette.primary.mint,
    'errorLens.hintMessageBackground': `${palette.primary.mint}${getHexAlpha(20)}`,
    'errorLens.hintRangeBackground': `${palette.primary.mint}${getHexAlpha(20)}`,
    'errorLens.infoBackground': `${palette.primary.blue}${getHexAlpha(20)}`,
    'errorLens.infoBackgroundLight': `${palette.primary.blue}${getHexAlpha(20)}`,
    'errorLens.infoForeground': palette.primary.blue,
    'errorLens.infoForegroundLight': palette.primary.blue,
    'errorLens.infoMessageBackground': `${palette.primary.blue}${getHexAlpha(20)}`,
    'errorLens.infoRangeBackground': `${palette.primary.blue}${getHexAlpha(20)}`,
    'errorLens.statusBarErrorForeground': palette.secondary.red,
    'errorLens.statusBarHintForeground': palette.secondary.mint,
    'errorLens.statusBarIconErrorForeground': palette.secondary.red,
    'errorLens.statusBarIconWarningForeground': palette.secondary.orange,
    'errorLens.statusBarInfoForeground': palette.secondary.blue,
    'errorLens.statusBarWarningForeground': palette.secondary.orange,
    'errorLens.warningBackground': `${palette.primary.orange}${getHexAlpha(20)}`,
    'errorLens.warningBackgroundLight': `${palette.primary.orange}${getHexAlpha(20)}`,
    'errorLens.warningForeground': palette.primary.orange,
    'errorLens.warningForegroundLight': palette.primary.orange,
    'errorLens.warningMessageBackground': `${palette.primary.orange}${getHexAlpha(20)}`,
    'errorLens.warningRangeBackground': `${palette.primary.orange}${getHexAlpha(20)}`,
  };
};

const githubPullRequests = (palette) => {
  return {
    'pullRequests.closed': palette.primary.red,
    'pullRequests.draft': `${palette.primary.white}${getHexAlpha(35)}`,
    'pullRequests.merged': palette.primary.purple,
    'pullRequests.notification': palette.primary.blue,
    'pullRequests.open': palette.primary.green,
    'issues.closed': palette.primary.purple,
    'issues.newIssueDecoration': `${palette.primary.white}${getHexAlpha(20)}`,
    'issues.open': palette.primary.green,
  };
};

const gitLens = (palette) => {
  return {
    'gitlens.closedAutolinkedIssueIconColor': palette.primary.purple,
    'gitlens.closedPullRequestIconColor': palette.primary.red,
    'gitlens.decorations.addedForegroundColor': palette.primary.green,
    'gitlens.decorations.branchAheadForegroundColor': palette.primary.green,
    'gitlens.decorations.branchBehindForegroundColor': palette.primary.orange,
    'gitlens.decorations.branchDivergedForegroundColor': palette.primary.yellow,
    'gitlens.decorations.branchMissingUpstreamForegroundColor': palette.primary.orange,
    'gitlens.decorations.branchUnpublishedForegroundColor': palette.primary.blue,
    'gitlens.decorations.branchUpToDateForegroundColor': `${palette.primary.white}${getHexAlpha(55)}`,
    'gitlens.decorations.copiedForegroundColor': palette.primary.yellow,
    'gitlens.decorations.deletedForegroundColor': palette.secondary.red,
    'gitlens.decorations.ignoredForegroundColor': `${palette.primary.white}${getHexAlpha(35)}`,
    'gitlens.decorations.modifiedForegroundColor': palette.primary.blue,
    'gitlens.decorations.renamedForegroundColor': palette.primary.yellow,
    'gitlens.decorations.untrackedForegroundColor': palette.secondary.green,
    'gitlens.decorations.statusMergingOrRebasingConflictForegroundColor': palette.primary.orange,
    'gitlens.decorations.statusMergingOrRebasingForegroundColor': palette.secondary.yellow,
    'gitlens.decorations.workspaceCurrentForegroundColor': palette.primary.green,
    'gitlens.decorations.workspaceRepoMissingForegroundColor': `${palette.primary.white}${getHexAlpha(35)}`,
    'gitlens.decorations.workspaceRepoOpenForegroundColor': palette.primary.green,
    'gitlens.decorations.worktreeHasUncommittedChangesForegroundColor': palette.secondary.blue,
    'gitlens.decorations.worktreeMissingForegroundColor': palette.primary.red,
    'gitlens.graphChangesColumnAddedColor': palette.primary.green,
    'gitlens.graphChangesColumnDeletedColor': palette.primary.red,
    'gitlens.graphLane10Color': palette.primary.orange,
    'gitlens.graphLane1Color': palette.primary.red,
    'gitlens.graphLane2Color': palette.primary.orange,
    'gitlens.graphLane3Color': palette.primary.yellow,
    'gitlens.graphLane4Color': palette.primary.green,
    'gitlens.graphLane5Color': palette.primary.mint,
    'gitlens.graphLane6Color': palette.primary.blue,
    'gitlens.graphLane7Color': palette.primary.purple,
    'gitlens.graphLane8Color': palette.primary.pink,
    'gitlens.graphLane9Color': palette.primary.red,
    'gitlens.graphMinimapMarkerHeadColor': palette.primary.green,
    'gitlens.graphMinimapMarkerHighlightsColor': palette.primary.mint,
    'gitlens.graphMinimapMarkerLocalBranchesColor': palette.primary.purple,
    'gitlens.graphMinimapMarkerRemoteBranchesColor': palette.secondary.mint,
    'gitlens.graphMinimapMarkerStashesColor': palette.primary.pink,
    'gitlens.graphMinimapMarkerTagsColor': palette.primary.yellow,
    'gitlens.graphMinimapMarkerUpstreamColor': palette.secondary.green,
    'gitlens.graphScrollMarkerHeadColor': `${palette.primary.green}${getHexAlpha(80)}`,
    'gitlens.graphScrollMarkerHighlightsColor': `${palette.primary.mint}${getHexAlpha(80)}`,
    'gitlens.graphScrollMarkerLocalBranchesColor': `${palette.primary.purple}${getHexAlpha(80)}`,
    'gitlens.graphScrollMarkerRemoteBranchesColor': `${palette.primary.mint}${getHexAlpha(80)}`,
    'gitlens.graphScrollMarkerStashesColor': `${palette.primary.pink}${getHexAlpha(80)}`,
    'gitlens.graphScrollMarkerTagsColor': `${palette.primary.yellow}${getHexAlpha(80)}`,
    'gitlens.graphScrollMarkerUpstreamColor': `${palette.primary.green}${getHexAlpha(80)}`,
    'gitlens.gutterBackgroundColor': palette.dark.grey2,
    'gitlens.gutterForegroundColor': `${palette.primary.white}${getHexAlpha(55)}`,
    'gitlens.gutterUncommittedForegroundColor': palette.secondary.blue,
    'gitlens.lineHighlightBackgroundColor': `${palette.primary.white}${getHexAlpha(5)}`,
    'gitlens.lineHighlightOverviewRulerColor': `${palette.primary.white}${getHexAlpha(5)}`,
    'gitlens.mergedPullRequestIconColor': palette.primary.purple,
    'gitlens.openPullRequestIconColor': palette.primary.green,
    'gitlens.openAutolinkedIssueIconColor': palette.primary.green,
    'gitlens.trailingLineBackgroundColor': palette.transparent,
    'gitlens.trailingLineForegroundColor': `${palette.primary.white}${getHexAlpha(20)}`,
    'gitlens.unpublishedChangesIconColor': palette.secondary.green,
    'gitlens.unpublishedCommitIconColor': palette.primary.green,
    'gitlens.unpulledChangesIconColor': palette.primary.orange,
  };
};

export const getExtensionsColors = (themeContext) => {
  const palette = themeContext.palette;
  return {
    ...gitLens(palette),
    ...githubPullRequests(palette),
    ...errorLens(palette),
  };
};
